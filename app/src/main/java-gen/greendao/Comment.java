package greendao;

import greendao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table COMMENT.
 */
public class Comment {

    private Long id;
    private String content;
    private String userId;
    private String postId;
    private Long idCatPost;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient CommentDao myDao;

    private CatPost catPost;
    private Long catPost__resolvedKey;


    public Comment() {
    }

    public Comment(Long id) {
        this.id = id;
    }

    public Comment(Long id, String content, String userId, String postId, Long idCatPost) {
        this.id = id;
        this.content = content;
        this.userId = userId;
        this.postId = postId;
        this.idCatPost = idCatPost;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCommentDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getContent() {
        return content;
    }

    public void setContent(String content) {
        this.content = content;
    }

    public String getUserId() {
        return userId;
    }

    public void setUserId(String userId) {
        this.userId = userId;
    }

    public String getPostId() {
        return postId;
    }

    public void setPostId(String postId) {
        this.postId = postId;
    }

    public Long getIdCatPost() {
        return idCatPost;
    }

    public void setIdCatPost(Long idCatPost) {
        this.idCatPost = idCatPost;
    }

    /** To-one relationship, resolved on first access. */
    public CatPost getCatPost() {
        Long __key = this.idCatPost;
        if (catPost__resolvedKey == null || !catPost__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CatPostDao targetDao = daoSession.getCatPostDao();
            CatPost catPostNew = targetDao.load(__key);
            synchronized (this) {
                catPost = catPostNew;
            	catPost__resolvedKey = __key;
            }
        }
        return catPost;
    }

    public void setCatPost(CatPost catPost) {
        synchronized (this) {
            this.catPost = catPost;
            idCatPost = catPost == null ? null : catPost.getId();
            catPost__resolvedKey = idCatPost;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
