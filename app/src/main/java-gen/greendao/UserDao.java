package greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import greendao.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table USER.
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ServerId = new Property(1, String.class, "serverId", false, "SERVER_ID");
        public final static Property Username = new Property(2, String.class, "username", false, "USERNAME");
        public final static Property ImageUrl = new Property(3, String.class, "imageUrl", false, "IMAGE_URL");
        public final static Property CoverImageUrl = new Property(4, String.class, "coverImageUrl", false, "COVER_IMAGE_URL");
        public final static Property AuthToken = new Property(5, String.class, "authToken", false, "AUTH_TOKEN");
        public final static Property Email = new Property(6, String.class, "email", false, "EMAIL");
        public final static Property Info = new Property(7, String.class, "info", false, "INFO");
        public final static Property Favorites = new Property(8, String.class, "favorites", false, "FAVORITES");
        public final static Property FirstName = new Property(9, String.class, "firstName", false, "FIRST_NAME");
        public final static Property LastName = new Property(10, String.class, "lastName", false, "LAST_NAME");
        public final static Property Description = new Property(11, String.class, "description", false, "DESCRIPTION");
        public final static Property LoggedIn = new Property(12, Boolean.class, "loggedIn", false, "LOGGED_IN");
    };


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'USER' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'SERVER_ID' TEXT UNIQUE ," + // 1: serverId
                "'USERNAME' TEXT," + // 2: username
                "'IMAGE_URL' TEXT," + // 3: imageUrl
                "'COVER_IMAGE_URL' TEXT," + // 4: coverImageUrl
                "'AUTH_TOKEN' TEXT," + // 5: authToken
                "'EMAIL' TEXT," + // 6: email
                "'INFO' TEXT," + // 7: info
                "'FAVORITES' TEXT," + // 8: favorites
                "'FIRST_NAME' TEXT," + // 9: firstName
                "'LAST_NAME' TEXT," + // 10: lastName
                "'DESCRIPTION' TEXT," + // 11: description
                "'LOGGED_IN' INTEGER);"); // 12: loggedIn
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_USER_SERVER_ID ON USER" +
                " (SERVER_ID);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'USER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String serverId = entity.getServerId();
        if (serverId != null) {
            stmt.bindString(2, serverId);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(3, username);
        }
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(4, imageUrl);
        }
 
        String coverImageUrl = entity.getCoverImageUrl();
        if (coverImageUrl != null) {
            stmt.bindString(5, coverImageUrl);
        }
 
        String authToken = entity.getAuthToken();
        if (authToken != null) {
            stmt.bindString(6, authToken);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(7, email);
        }
 
        String info = entity.getInfo();
        if (info != null) {
            stmt.bindString(8, info);
        }
 
        String favorites = entity.getFavorites();
        if (favorites != null) {
            stmt.bindString(9, favorites);
        }
 
        String firstName = entity.getFirstName();
        if (firstName != null) {
            stmt.bindString(10, firstName);
        }
 
        String lastName = entity.getLastName();
        if (lastName != null) {
            stmt.bindString(11, lastName);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(12, description);
        }
 
        Boolean loggedIn = entity.getLoggedIn();
        if (loggedIn != null) {
            stmt.bindLong(13, loggedIn ? 1l: 0l);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // serverId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // username
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // imageUrl
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // coverImageUrl
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // authToken
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // email
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // info
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // favorites
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // firstName
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // lastName
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // description
            cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0 // loggedIn
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setServerId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUsername(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setImageUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCoverImageUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAuthToken(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setEmail(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setInfo(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFavorites(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFirstName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setLastName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setDescription(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setLoggedIn(cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
